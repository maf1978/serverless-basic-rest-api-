service: notes-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: dev 
  region: us-east-1


functions:
  createNote:
    handler: handler.createNote
    events:
      - http: 
          method: post 
          path: notes 
  updateNote:
    handler: handler.updateNote
    events:
      - http: 
          method: put 
          path: notes/{id}           
  deleteNote:
    handler: handler.deleteNote
    events:
      - http: 
          method: delete
          path: notes/{id}
  getallNotes:
    handler: handler.getallNotes
    events:
      - http: 
          method: get
          path: notes      
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions: 
          - AttributeName: notesId
            AttributeType: S
        KeySchema: 
          - AttributeName: notesId
            KeySType: HASH    
         




#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
